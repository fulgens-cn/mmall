<?xml version="1.0" encoding="UTF-8"?>
<!-- scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟 -->
<!-- debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!-- 控制台输出日志格式 -->
    <property name="CONSOLE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} -%5p --- [%15.15t] %-40.40logger{39} : %m%n"/>
    <!-- 文件日志输出格式 -->
    <property name="FILE_LOG_PATTERN" value="-%d{yyyy-MM-dd HH:mm:ss.SSS}} -%5p --- [%t] %-40.40logger{39} : %m%n"/>

    <!-- 控制台输出ConsoleAppender -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${CONSOLE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 定义日志文件存放路径 -->
    <property name="LOG_PATH" value="/Users/fulgens/log"/>
    <!-- 定义日志文件名 -->
    <property name="LOG_FILE" value="${LOG_PATH}/mmall.log}"/>
    <property name="ERROR_FILE" value="${LOG_PATH}/mmall-error.log}"/>

    <!-- 输出到文件RollingFileAppender -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!-- 指定日志文件的名称 -->
        <file>${LOG_FILE}</file>
        <!-- 指定滚动策略，常用的有：TimeBasedRollingPolicy、SizeAndTimeBasedRollingPolicy -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- 指定归档日志文件名称 -->
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i.gz</fileNamePattern>
            <!-- 当日志文件超过maxFileSize指定的大小进行归档 -->
            <maxFileSize>1024MB</maxFileSize>
            <!-- 归档日志保留时间，如：配置30则保留30天，0表示无限制 -->
            <maxHistory>30</maxHistory>
        </rollingPolicy>
    </appender>

    <appender name="ERROR" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <file>${ERROR_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${ERROR_FILE}.%d{yyyy-MM-dd}.gz</fileNamePattern>
            <append>true</append>
            <maxHistory>30</maxHistory>
        </rollingPolicy>
        <!--只输出ERROR级别日志-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- logger用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender> -->
    <!-- <logger>仅有一个name属性，一个可选的level和一个可选的additivity属性 -->
    <!-- name:指定受此logger约束的某一个包或者具体的某一个类 -->
    <!-- level:日志级别 TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特殊值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前logger将会继承上级的级别 -->
    <!-- additivity:是否向上级logger传递打印信息默认是true -->
    <logger name="cn.fulgens.mmall" additivity="false" level="INFO" >
        <appender-ref ref="CONSOLE"/>
    </logger>

    <!-- mybatis log 日志 -->
    <logger name="cn.fulgens.mmall.mapper" level="DEBUG"/>

    <logger name="org.apache.catalina.startup.DigesterFactory" level="ERROR"/>
    <logger name="org.apache.catalina.util.LifecycleBase" level="ERROR"/>
    <logger name="org.apache.coyote.http11.Http11NioProtocol" level="WARN"/>
    <logger name="org.apache.sshd.common.util.SecurityUtils" level="WARN"/>
    <logger name="org.apache.tomcat.util.net.NioSelectorPool" level="WARN"/>
    <logger name="org.eclipse.jetty.util.component.AbstractLifeCycle" level="ERROR"/>
    <logger name="org.hibernate.validator.internal.util.Version" level="WARN"/>

    <root level="DEBUG">
        <appender-ref ref="CONSOLE"/>
    </root>

</configuration>